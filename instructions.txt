
# Guide: Linking Your Content to the Portfolio

This guide explains how to link your GitHub repositories, certificates, and resume PDF to your portfolio website. All code references are for the `index.tsx` file.

## 1. Linking GitHub Repositories to Project Cards

Your project cards can link directly to their corresponding GitHub repositories.

**Steps:**

1.  **Locate the `ProjectsSection` Component:** Open `index.tsx` and find the `ProjectsSection` functional component.
2.  **Edit the `projects` Array:** Inside this component, there's an array named `projects`. Each object in this array represents one project card and should have a `link` property.
    ```javascript
    // Inside ProjectsSection component in index.tsx
    const projects = [
        { 
            title: "Secure File Transfer Protocol", 
            description: "A C++ application ensuring encrypted file transfers...", 
            technologies: ["C++", "OpenSSL", "Socket Programming"], 
            link: "https://github.com/your-username/your-repo-name" // <-- UPDATE THIS URL
        },
        { 
            title: "Intrusion Detection System (PoC)", 
            description: "A Java-based proof-of-concept IDS...", 
            technologies: ["Java", "Pcap4j", "Rule Engines"], 
            link: "https://github.com/your-username/another-repo-name" // <-- UPDATE THIS URL
        },
        // ... other projects
    ];
    ```
3.  **Update the `link` Property:** For each project, change the placeholder value (e.g., `"#"` or a sample URL) of the `link` property to the actual URL of its GitHub repository.
4.  **Save `index.tsx`**. The "View Project" button on the card will now direct users to your repository.

## 2. Linking Certificates (PDFs or PNGs)

Your certificate cards can link to viewable certificate files (like PDFs or images) or online credential verification pages.

**Steps:**

1.  **Host Your Certificate Files:**
    *   Your certificate files (e.g., `my_cert.pdf`, `another_cert.png`) need to be accessible via a URL.
    *   **Option A: Project Folder (for static site deployment):**
        *   Create a folder in your project, for example, `public/certificates/`.
        *   Place your certificate files inside this folder (e.g., `public/certificates/cybersecurity_fundamentals.pdf`).
        *   When linking, you'll use a relative path like `/certificates/cybersecurity_fundamentals.pdf`. (Note: In the current single-file setup, you might need to adjust this thinking if you don't have a `public` folder that's served statically. For simple hosting like GitHub Pages, placing them in the root or a subfolder like `certificates/` and linking directly like `certificates/my_cert.pdf` might work).
    *   **Option B: Cloud Storage:**
        *   Upload your certificates to Google Drive, Dropbox, OneDrive, or an image/document hosting service.
        *   Ensure you get a **direct, shareable link** to the file itself (not just a preview page).
    *   **Option C: Credential Platforms:**
        *   If your certification issuer provides a public URL to verify/view your credential, use that URL.

2.  **Locate the `CertificatesSection` Component:** Open `index.tsx` and find the `CertificatesSection` component.
3.  **Edit the `certificates` Array:** Inside this component, find the `certificates` array. Each object represents a certificate and has a `credentialLink` property.
    ```javascript
    // Inside CertificatesSection component in index.tsx
    const certificates: Certificate[] = [
        { 
            title: "Cybersecurity Fundamentals", 
            issuer: "CyberCertify Inc.", 
            date: "Issued: Jan 2024", 
            credentialLink: "/certificates/cybersecurity_fundamentals.pdf", // <-- UPDATE THIS (example for local file)
            icon: <AwardIcon />,
        },
        { 
            title: "Advanced Java Programming", 
            issuer: "CodeMaster Academy", 
            date: "Issued: Dec 2023", 
            credentialLink: "https://your-cloud-storage.com/link/to/java_cert.png", // <-- UPDATE THIS (example for cloud hosted)
            icon: <AwardIcon />,
        },
        // ... other certificates
    ];
    ```
4.  **Update the `credentialLink` Property:** For each certificate, change the `credentialLink` to the direct URL of your hosted certificate file or verification page. If a certificate doesn't have an online credential, you can remove the `credentialLink` property or set it to `undefined` for that entry (the "View Credential" button won't render).
5.  **Save `index.tsx`**. The "View Credential" button will now link to your certificate.

## 3. Linking Your Resume (e.g., `resume.pdf`)

The "Download Resume" button in the Hero section can link directly to your resume file.

**Steps:**

1.  **Host Your Resume File:**
    *   Similar to certificates, your `resume.pdf` (or other format) needs to be hosted.
    *   **Recommended for static sites (like GitHub Pages):**
        *   Place your `resume.pdf` file in the root directory of your project (the same directory as `index.html`).
        *   Alternatively, create an `assets` folder (e.g., `assets/resume.pdf`) and place it there.

2.  **Locate the `HeroSection` Component:** Open `index.tsx` and find the `HeroSection` component.
3.  **Update the `<a>` tag for the Resume Button:** Find the "Download Resume" button, which is an `<a>` tag.
    ```javascript
    // Inside HeroSection component in index.tsx
    <a 
        href="resume.pdf" // <-- UPDATE THIS PATH if needed
        target="_blank" 
        rel="noopener noreferrer" 
        className="cta-button secondary-cta"
    >
        Download Resume
    </a>
    ```
4.  **Adjust the `href` Attribute:**
    *   If you placed `resume.pdf` in the **root directory**, the current `href="resume.pdf"` should work.
    *   If you placed it in an `assets` subdirectory, change it to `href="assets/resume.pdf"`.
    *   If you hosted it online (e.g., Google Drive), use the direct shareable URL: `href="https://your-cloud-provider.com/link/to/resume.pdf"`.
5.  **Save `index.tsx`**. The "Download Resume" button will now link to your resume.

**Important Notes for File Hosting:**

*   **Deployment:** If you're hosting files locally within your project (e.g., in a `public` or `assets` folder, or the root), ensure these files are included when you deploy your portfolio. The paths in your links must be correct relative to the root of your deployed site.
*   **File Sizes:** Optimize your PDF and image files to keep their sizes reasonable. This improves loading times for users.
*   **Link Accessibility:** Make sure any online links (especially for cloud-hosted files) are set to be publicly viewable.

By following these instructions, you can make your portfolio fully interactive and showcase your actual work and credentials!
